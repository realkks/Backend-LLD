package InheritanceAndPolymorphism;

// INHERITANCE IS CATEGORIZED ON BASIS OF PROPERTIES/FEATURES . OR CATEGORIZING ON BASIS OF LOGICAL/PHYSICAL RELATIONSHIPS .
// CHILD CLASS INHERIT PROPERTIES (ATTRIBUTES & BEHAVIOUR) OF PARENT CLASS BUT CANN'T INHERIT PRIVATE PROPERTIES
//YOU CAN ACCESS PRIVATE PROPERTIES USING SETTER AND GETTER METHOD FROM OUTSIDE OF CLASS
// CHILD CLASS EXTENDS PARENT CLASS
// CONSTRUCTOR CALL HAPPEN FROM CHILD TO PARENT BUT EXECUTION HAPPEN FROM PARENT TO CHILD .
// CYCLIC INHERITANCE OR MULTIPLE INHERITANCE DOESN'T EXIST IN JAVA
// SUPER(PARAM) METHOD IN CHILD CLASS IS USED TO CALL PARAMETERIZED CONSTRUCTOR OF IMMEDIATE PARENT'S CLASS . PUT, SUPER() IN CHILD'S CONSTRUCTOR .
// SUPER() METHOD IS USED TO CALL CORRESPONDING CONSTRUCTOR OF PARENT CLASS , OTHERWISE DEFAULT CONSTRUCTOR WILL BE CALLED .
// THIS() METHOD IS USED TO CALL  CONSTRUCTOR SAME CLASS WHICH CAN BE PARAMETRIZED OR NON-PARAMETRIZED.
// PARENT CLASS REFERENCE VARIABLE CAN REFER TO CHILD OBJECT , BUT VICE VERSA NOT POSSIBLE (CAN ONLY ACCESS PARENT ATTRIBUTES OR FUNC.)
// EG: ANIMAL D = NEW DOG() - CORRECT , BUT DOG D = NEW ANIMAL() - INCORRECT
// JAVA DOES NOT HAVE MULTIPLE INHERITANCE
// JAVA DOES NOT SUPPORT OPERATOR OVERLOADING
// STATIC METHODS CAN BE OVERLOADED BUT CANNOT OVERRIDE
// OVERLOADING - AT COMPILE TIME
// OVERRIDING - AT RUN TIME
// RETURN TYPE HAS NO SIGNIFICANCE FOR METHOD OVERLOADING .
// METHOD SIGNATURE - combination of the method name and its parameter list . iT IS USED  to differentiate between methods with
// the same name but different parameter types or the number of parameters. The return type of a method is not included in
// the method signature.
// METHOD OVERRIDING HAPPENS ONLY WHEN SAME METHOD WITH SAME RETURN TYPE IN PARENT & CHILD CLASS . PREFERENCE IS GIVEN TO CHILD CLASS




public class Main {
    public static void main(String[] args) {
        Point tp = new ThreedPoint();
        tp.display2();
    }
}
